// - есть массив чисел - получить второй массив из первого, оставив только четные числа
const arr7 = [10, 11, 12, 13, 14, 15, 16];

for (let i = 0; i <= arr7.length; i++) {
  if (arr7[i] % 2 === 0) {
    console.log(arr7[i]);
  }
}
// результат расчета не совсем тот, который нужен мне. Здесь выводятся просто четные числа из заданного массива.
// 10
// 12
// 14
// 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЧЕРЕЗ ЦИКЛ For
const arr8 = [10, 11, 12, 13, 14, 15, 16];

function newMassive() {
  const arrNew = [];

  for (let i = 0; i <= arr8.length; i++) {
    if (arr8[i] % 2 === 0) {
      arrNew.push(arr8[i]);
    }
  }
  console.log(arrNew); // результат [10, 12, 14, 16]
}

newMassive(); // вызов функции
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЧЕРЕЗ ЦИКЛ While (вывести четный массив)
let arr9 = [10, 11, 12, 13, 14, 15, 16];

let i = 0;
let arrNew = [];

while (i <= arr9.length - 1) { // лучше писать (i <arr9.length) - так меньше символов!
  if (arr9[i] % 2 === 0) {
    arrNew.push(arr9[i]);
  }
  i++;
}

console.log(arrNew); // результат [10, 12, 14, 16]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЧЕРЕЗ ЦИКЛ While (вывести нечетный массив)
let arr10 = [10, 11, 12, 13, 14, 15, 16];

let i = 0;
let arrNew = [];

while (i <= arr10.length - 1) { // лучше писать (i <arr10.length) - так меньше символов!
  if (arr10[i] % 2 === 1) {
    arrNew.push(arr10[i]);
  }
  i++;
}

console.log(arrNew); // результат [11, 13, 15]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЧЕРЕЗ ЦИКЛ do...while (четный массив)
// Цикл «do…while»
// Проверку условия можно разместить под телом цикла, используя специальный СИНТАКСИС do..while:
// do {
// тело цикла
// } while (condition);
// Цикл сначала выполнит тело, а затем проверит условие condition, и пока его значение равно true, он будет выполняться снова и снова.

let arr11 = [10, 11, 12, 13, 14, 15, 16];

let i = 0;
let arrNew = [];

do {
  if (arr11[i] % 2 === 0) {
    arrNew.push(arr11[i]);
  }
  i++;
} while (i < arr11.length);

console.log(arrNew); // результат [10, 12, 14, 16]

// ЧЕРЕЗ ЦИКЛ do...while (нечетный массив)
let arr12 = [10, 11, 12, 13, 14, 15, 16];

let i = 0;
let arrNew = [];

function massive() {
  if (arr12.length === 0) {
    console.log(arrNew);
    return; // Оператор return используется в функциях для возвращения данных после выполнения работы функции.
    // Если функция должна обработать какие-то данные и потом вернуть их, то для возвращения данных необходим оператор return.
  }
  do {
    if (arr12[i] % 2 === 1) {
      arrNew.push(arr11[i]);
    }
    i++;
  } while (i < arr11.length);
}

massive();
console.log(arrNew); // результат [11, 13, 15]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//прогоним пустой массив и убедимся, что программа работает корректно
let arr12 = [];

let i = 0;
let arrNew = [];

function massive() {
  if (arr12.length === 0) {
    console.log(arrNew);
    return; // Оператор return используется в функциях для возвращения данных после выполнения работы функции.
    // Если функция должна обработать какие-то данные и потом вернуть их, то для возвращения данных необходим оператор return.
  }
  do {
    if (arr12[i] % 2 === 1) {
      arrNew.push(arr11[i]);
    }
    i++;
  } while (i < arr11.length);
}

massive();
console.log(arrNew); // результат [] - пустой массив, length:0 - все работает корректно!
